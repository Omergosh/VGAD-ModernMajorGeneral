<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ---
// Global set up.
// ---
player_num = global.res_player_num; // Save our player_num
global.res_player_num += 1; // Increment res_player_num for next res_manager

// ---
// Drawing bar variables set up.
// ---

bar_width = room_width / 10;
bar_height = room_height / 50;
bar_y = room_height - (room_height / 50) - bar_height;
bar_x = room_width / 50 + player_num * (bar_width + room_width / 50);

// ---
// Resources variables set up.
// ---
// Res values
max_res = 100;
mid_res = max_res / 2;
res = mid_res;

// Res scaling
tiers = 5;
tier_size = mid_res / tiers;

// Drawing text variables set up
// Can statically set up height
var text_height = string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ"); // Only need this once
text_top = bar_y - (3 * text_height / 2);

// Need to recalculate horizontal position to stop text flickering
max_text_width = string_width(string(max_res) + " / " + string(max_res)); // Need this to right justify
text_base_left = bar_x + (bar_width / 2) - (max_text_width / 2);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ---
// This script is how we calculate power. Passive power increases should be
// calculated here.
// ---

// Get the absolute difference between the middle value and our current value
var diff = abs(mid_res - res);

// Get our pay tier. LOWER is MORE. (We pay more if you're closer to 50).
tier = diff / tier_size;

var income;
if (tier &lt;= 1) {
    income = 10/30;
}
else if (tier &lt;= 2) {
    income = 10/60;
}
else if (tier &lt;= 3) {
    income = 10/90;
}
else if (tier &lt;= 4) {
    income = 10/120;
}
else {
    income = 10/150;
}

if (income + res &gt;= 100)
    res = 100;
else
    res += income;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Bar drawing
var left = bar_x;
var right = bar_x + (bar_width * res / 100);
var top = bar_y;
var bottom = bar_y + bar_height;

var color_scale = tier / tiers;
var color = merge_color(c_green, c_red, color_scale);
draw_set_colour(color);
draw_rectangle(left, top, right, bottom, false);

// Text drawing
var str = string(round(res)) + " / " + string(max_res);
var text_left = text_base_left + (max_text_width - string_width(str));
draw_set_color(c_white);
draw_text(text_left, text_top, str);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="109">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (player_num != 0)
    exit;

if (res - 10 &lt;= 0)
    res = 0;
else
    res -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (player_num != 1)
    exit;

if (res - 10 &lt;= 0)
    res = 0;
else
    res -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
